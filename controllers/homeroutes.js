const router = require("express").Router();
const { Product, User, Cart } = require("../models/");
const isAuthenticated = require("../config/middleware/isAuthenticated");
const { response } = require("express");
const { request } = require("express");

const stripe = require("stripe")(
  "sk_test_51KGGcjDQw3iOHoMjf3YITBwKINTnXK3bur0cgCPuh60dD993ZmOU4Tqoy33u52gPG3usHBJpeZnvJBHuQtUxRK5O00WkMZpfof"
);

router.get("/", (req, res) => {
  res.render("index");
});
//need to add get from product table
// router.get("/products", (req, res) => {
//   // where is /products at in my code ?  it
//   res.render("products");
// });

//get all products from database
router.get("/products", (req, res) => {
  Product.findAll({
    // include: [User],
  })
    .then((dbProductData) => {
      const products = dbProductData.map((post) => post.get({ plain: true }));

      res.render("products", { products });
      console.log(products);
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json(err);
    });
});

//sequelize findByPk method
router.get("/product/:id", (req, res) => {
  Product.findByPk(req.params.id)
    .then((dbProductData) => {
      const product = dbProductData.get({ plain: true });
      res.render("single-product", { product });
    })
    .catch((err) => {
      console.log(err);
      res.status(500).json(err);
    });
});

//show cart by user id
router.get("/cart", isAuthenticated, function (req, res) {
  Cart.findAll({
    where: {
      UserId: req.user.id,
    },
    include: [Product],
  })
    .then(function (cartItems) {
      res.render("cart", { cartItems, user: req.user });
    })
    .catch(function (err) {
      console.log(err.message);
      response.send(err);
    });
});
//add new item to cart
router.post("/cart/:itemId", isAuthenticated, function (req, res) {
  Cart.create({
    quantity: req.body.quantity, //this will be the quantity of the product
    UserId: req.user.id, //this will be the user id
    ProductId: req.params.id, //this will be the product id from the url
  })
    .then(function (addedItem) {
      res.redirect("/products");
    })
    .catch(function (err) {
      console.log(err.message);
      response.send(err);
    });
});
//update quantity of item in cart
router.put("/cart/:itemId", isAuthenticated, function (req, res) {
  Cart.update(
    { quantity: request.body.quantity },
    {
      where: {
        UserId: req.user.id,
        ProductId: req.params.itemId,
      },
      include: [Product],
    }
  )
    .then(function (cartItems) {
      res.redirect("/cart");
    })
    .catch(function (err) {
      console.log(err.message);
      response.send(err);
    });
});
//delete item from cart
router.delete("/cart/:itemId", isAuthenticated, function (req, res) {
  Cart.destroy({
    where: {
      UserId: req.user.id,
      id: req.params.itemId,
    },
  })
    .then(function () {
      res.redirect("/cart");
    })
    .catch(function (err) {
      console.log(err.message);
      response.send(err);
    });
});
//get the data-amount from the form in  product.handlebars and pass it in to this post route
router.post("/charge", (req, res) => {
  const { price, stripeToken } =
    //stripeToken is the token that is generated by stripe when you click on the button
    //price is the amount of the product that is being charged from the form
    req.body;
  console.log(price);
  console.log(stripeToken);
  stripe.charges
    .create({
      amount: price,
      source: stripeToken,
      currency: "usd",
    })
    .then((charge) => res.render("success"));
});

router.get("/contact_me", (req, res) => {
  res.render("contact");
});

router.get("/login", (req, res) => {
  res.render("registration");
});

router.get("/privacy", (req, res) => {
  res.render("privacy");
});

router.get("/welcomeuser", (req, res) => {
  res.render("welcomeuser");
});

//admin page
router.get("/admin", (req, res) => {
  res.render("admin");
});

//router.get for the a href product 1 inside the productinfo1.handlebars

//TODO after login

module.exports = router;
